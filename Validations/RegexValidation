using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using System.Text.RegularExpressions;

namespace RegexValidationAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ValidationController : ControllerBase
    {
        [HttpPost("validate-user")]  
        public IActionResult ValidateUser([FromBody] UserModel user)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            // Additional Custom Validation
            if (!RegexValidationService.ValidatePassword(user.Password))
                return BadRequest("Password must have at least one uppercase letter, one number, and be at least 8 characters long.");
            
            return Ok("User data is valid!");
        }
    }

    public class UserModel
    {
        [Required]
        [RegularExpression("^[a-zA-Z]+$", ErrorMessage = "Name must contain only letters.")]
        public string Name { get; set; }

        [Required]
        [RegularExpression("^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$", ErrorMessage = "Invalid email format.")]
        public string Email { get; set; }

        [Required]
        [RegularExpression("^\+92\d{10}$", ErrorMessage = "Phone must be in Pakistani format: +923001234567.")]
        public string Phone { get; set; }

        [Required]
        public string Password { get; set; } // Custom regex validation handled in service
    }

    public static class RegexValidationService
    {
        public static bool ValidatePassword(string password)
        {
            return Regex.IsMatch(password, "^(?=.*[A-Z])(?=.*\\d).{8,}$");
        }
    }
}
